// 문제요약: 하노이 탑을 1번기둥에서 3번기둥으로 옮기는 방법 구하기
// 입력: 원판의 개수 n
// 출력: 옮기는 방법의 순서 2차원 배열
// 조건: 1<=n<=15
// 알고리즘 선택: 재귀
//  2개의 원판을 옮기려면?
//      1번:1->2, 2번:1->3, 1번:2->3
//  3개의 원판을 옮기려면?
//      1번:1->3, 2번:1->2, 1번:3->2, 3번:1->3, 1번:2->1, 2번:2->3, 1번:1->3
//  규칙은 n번째 원판을 1->3번으로 옮기려면, n-1개의 원판이 모두 2번기둥에 있어야 한다는 것
//  따라서 n개의 원판을 1->3으로 옮기려면 -> n-1번 원판을 1->2번으로 옮겨야 함 -> n-2번 원판이 나머지 하나의 기둥에 있어야 함 -> n-3번 원판이 나머지 하나의 기둥에 있어야 함 => 재귀
// 부분문제 분할:
//  move(n, from, to, other): n을 from에서 other을 거쳐 to로 이동
//      현재 원판 n을 from에서 to로 바로 옮길 수 없음. 위에 n-1개의 원판이 모두 other에 있어야하기 때문
//      move(n - 1, from, other, to): n-1번 원판을 2번째로 옮기려고 함. 
//          그런데 n - 2번 원판이 모두 other에 있어야함 
//              ...
//                  만약 1번 원판인 경우, other로 바로 이동

function solution(n) {
    const answer = [];
    
    hanoi(n, 1, 3, 2);
    
    function hanoi(n, from, to, other) {
        if (n === 1) {
            answer.push([from, to]);
            return;
        }
        hanoi(n - 1, from, other, to); //n-1원판을 2번째 기둥으로 옮김
        answer.push([from, to]); //n번째 원판 옮김
        hanoi(n - 1, other, to, from); //다시 쌓음
    }
    
    return answer;
}