// 문제요약: 화폐의 종류가 주어졌을 때, 거스름돈을 줄 수 있는 경우의 수를 구하기
// 입력: 
//  n: 거스름 돈 금액, 1<=n<=100000
//  money: 화폐 종류, money<=100
// 출력: 
//  경우의 수
// 알고리즘 선택: DP
//  화폐의 순서는 상관없음. 종류만 구분하면 됨
//  만약 1원만을 사용해 5원을 만든다고 해보자 
//      1,1,1,1,1
//  1,2원을 사용해 5원을 만든다고 해보자
//      1,1,1,1,1
//      1,1,1,2
//      1,2,2
//  -> 5원을 만들기 위해선 1,2,3,4원(이전 수)를 만들어야 하고, 
//      이전 수를 만들 땐, 이미 구한 경우의 수를 재사용할 수 있음 => DP

function solution(n, money) {

    const dp = Array.from({length: n + 1}, () => 0);
    dp[0] = 1;
    for (const m of money) {
        for (let i = m; i <= n; i++) {
            dp[i] += dp[i - m];
        }    
    }
    
    console.log(dp);
    
    return dp.pop();
}